{
  "name": "Node.js / npm Boilerplate",
  "tagline": "Babel ES6 / ES7 - Testing, Benchmark, Auto Reload, Linting",
  "body": "![Babel ES7 npm](https://github.frapsoft.com/top/babel-es7.jpg?v=101)\r\n\r\n\r\n# Babel ES6 / ES7 npm Skeleton\r\n\r\n[![Javascript](https://badges.frapsoft.com/javascript/code/javascript.svg?v=100)](https://github.com/ellerbrock/javascript-badges/) [![JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/ellerbrock/javascript-badges/) [![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version) [![Open Source Love](https://badges.frapsoft.com/os/v1/open-source.svg?v=102)](https://github.com/ellerbrock/open-source-badges/) [![Gitter Chat](https://badges.gitter.im/frapsoft/frapsoft.svg)](https://gitter.im/frapsoft/frapsoft/)\r\n\r\n_Node / npm Boilerplate with Babel ES6 / ES7 Support, Testing, Benchmarking, Debugging, Auto Reload, Linting and other cool stuff._\r\n\r\n\r\n## Whats inside?\r\n\r\n- Node optimized ES6 / ES7 transpilation with [Babel](https://github.com/babel/babel)\r\n- ES6+ aware minifier based on the Babel toolchain [babili](https://github.com/babel/babili)\r\n- Code monitoring and auto server restart with [nodemon](https://github.com/remy/nodemon)\r\n- ES6+ Testing via [babel-register](https://github.com/babel/babel/tree/master/packages/babel-register) with [Mocha](https://github.com/mochajs/mocha) & [Chai](https://github.com/chaijs/chai)\r\n- HTML Test Report via [mochawesome](https://github.com/adamgruber/mochawesome)\r\n- Code Linting with [ESLint](https://github.com/eslint/eslint)\r\n- Benchmark Testing with [benchmark.js](https://github.com/bestiejs/benchmark.js)\r\n- Javascript [Standard](https://github.com/feross/standard) Coding Style ready\r\n- Debugging with [babel-node-debug](https://github.com/crabdude/babel-node-debug)\r\n- Sourcemap generation\r\n- Vulnerability scan via [nsp](https://github.com/nodesecurity/nsp)\r\n- Check for latest versions of dependencies via [ncu](https://github.com/tjunnone/npm-check-updates)\r\n- Git commit hook to use conventional commit messages via [commitizen](https://github.com/commitizen/cz-cli)\r\n- Generate a changelog from git metadata with angular [commit convention](https://github.com/conventional-changelog/standard-changelog)\r\n- Cross platform script support via [Shell.js / shx](https://github.com/shelljs/shx)\r\n- npm scripts to quickly run tasks\r\n\r\n![unicorn](http://i.giphy.com/3o85xBO5Rt4031bH44.gif)\r\n\r\n\r\n## Quickstart\r\n\r\n```\r\ngit clone https://github.com/ellerbrock/node-npm-boilerplate\r\ncd node-npm-boilerplate\r\nnpm install\r\n```\r\n\r\n## Scripts\r\n\r\n- `npm run benchmark` - run benchmark tests with `benchmark.js`\r\n- `npm run benchmark:watch` - run benchmark tests with `benchmark.js` and watch for file changes\r\n- `npm run build` - transpile and minify ES6+ code and create sourcemaps with `babel` & `babili`\r\n- `npm run clean` - deletes the dist folder (Cross Platform Support via `Shell.js / shx`)\r\n- `npm run debug src` - execute code with debug flag enabled _(add the folder and script name if not index.js as argument)_\r\n- `npm run git:add` - add all files to git and print the status (ignore files via `.gitignore`)\r\n- `npm run git:commit` - commit conventional messages via commitizen`\r\n- `npm run lint` - code linting with `eslint`\r\n- `npm run lint:fix` - fix problems automatically with `eslint`\r\n- `npm run scan:security` - run vulnerability tests via the node security platform `nsp`\r\n- `npm run scan:updates` - check for latest versions of dependencies via `ncu`\r\n- `npm run serve` - serve production files from the `./dist` folder via `node`\r\n- `npm run setenv:dev` - deactivate npm production mode\r\n- `npm run setenv:prod` - activate npm production mode\r\n- `npm run test:export` - export tests results as html files in the `./reports` folder via `mochasome`\r\n- `npm run test:watch` - run tests with `mocha` and `chai` and watch for changes\r\n- `npm start src` - execute code with life reload via `nodemon` transpiled with `babel-node` _(add the folder and script name if not index.js as argument)_\r\n- `npm test` - run tests with `mocha` and `chai` with spec as reporter\r\n- `npm test:export` - export your test results via `mochawesome` as html\r\n- `npm test:watch` - run tests with `mocha` and `chai` with spec as reporter in watch mode\r\n\r\n```\r\n  \"scripts\": {\r\n    \"benchmark\": \"babel-node benchmark\",\r\n    \"benchmark:watch\": \"nodemon $2 --exec babel-node benchmark\",\r\n    \"build\": \"babel -s true src -d dist\",\r\n    \"clean\": \"shx rm -rf dist\",\r\n    \"debug\": \"nodemon $2 --exec babel-node --debug\",\r\n    \"git:add\": \"git add --all && git status\",\r\n    \"git:commit\": \"git-cz\",\r\n    \"lint\": \"eslint src\",\r\n    \"lint:fix\": \"eslint --fix src\",\r\n    \"scan:security\": \"nsp check\",\r\n    \"scan:updates\": \"ncu\",\r\n    \"serve\": \"node dist\",\r\n    \"setenv:dev\": \"npm config set production false\",\r\n    \"setenv:prod\": \"npm config set production true\",\r\n    \"start\": \"nodemon $2 --exec babel-node\",\r\n    \"test\": \"mocha -c -S -R spec 'tests' --compilers js:babel-register --check-leaks\",\r\n    \"test:export\": \"mocha -S -R mochawesome 'tests' --compilers js:babel-register --reporter-options reportDir=reports --check-leaks\",\r\n    \"test:watch\": \"mocha -w -c -S -R spec 'tests' --compilers js:babel-register --check-leaks\"\r\n  }\r\n```\r\n\r\n\r\n## Manual Installation / Build your own Boilerplate\r\n\r\n- `git init` - create a new git repository\r\n- `npm init -y` - create a initial package.json\r\n- `npm install --save-dev babel-cli nodemon eslint` - install development dependencies\r\n- `eslint --init` - setup your ESLint Style (in my case JS Standard)\r\n\r\n\r\n### ECMAScript 2015 / ES6\r\n\r\n[Node.js](https://github.com/nodejs/node) comes with a huge set of ES6 features out of the box. A detailed list of supported features can be found at <http://node.green>. To speed things up and avoid transpiling natively supported features i recommend to install only the missing parts in your current Node Version:\r\n\r\n- `npm install --save-dev babel-preset-es2015-node6` - Node.js Version 6x\r\n- `npm install --save-dev babel-preset-es2015-node5` - Node.js Version 5x\r\n- `npm install --save-dev babel-preset-es2015-node4` - Node.js Version 4x\r\n- `npm install --save-dev babel-preset-es2015` - for all Node.js Versions\r\n\r\n\r\n### ECMAScript X / Stage 0\r\n\r\n_Give me that cutting edge stuff right now!_  \r\n\r\n`npm install --save-dev babel-preset-stage-0` - ECMAScript [Stage 0](https://github.com/tc39/proposals/blob/master/stage-0-proposals.md) Features\r\n\r\n\r\n### ES6+ aware Minifier\r\n\r\n_Minify ES6+ Code directly with [babili](https://github.com/babel/babili)._\r\n\r\n- `npm install --save-dev babili babel-preset-babili`\r\n\r\n\r\n### Testing\r\n\r\n_Testing with [Mocha](https://github.com/mochajs/mocha) and [Chai](https://github.com/chaijs/chai), HTML Reports via [mochawesome](https://github.com/adamgruber/mochawesome)_\r\n\r\n- `npm install --save-dev babel-register` - install `babel-register` to test your ES6+ Code directly\r\n- `npm install --save-dev mocha chai` - install `mocha` and `chai` for testing\r\n- `npm install --save-dev mochawesome` - install `mochawesome` to export your tests results as fancy html files\r\n\r\n\r\n### Benchmarking Suite\r\n\r\n_Benchmark Testing with [Benchmark.js](https://github.com/bestiejs/benchmark.js)_\r\n\r\n- `npm install --save-dev benchmark microtime` - install `benchmark` and `microtime` for performance testing\r\n\r\n\r\n### Debugging\r\n\r\nAt the moment of writing Node.js Version 6x is sadly not working with [node-inspector/](https://github.com/node-inspector/node-inspector/). in current Version 0.12.8. Its a known issue i reported [here](https://github.com/node-inspector/node-inspector/issues/905#issuecomment-246203881). Hopefully when you read this its fixed for Node Version 6x and you can install [babel-node-debug](https://github.com/crabdude/babel-node-debug) for debugging ... (no known issues for users with Node Version 4x and 5x).\r\n\r\n- `npm install --save-dev babel-node-debug`\r\n\r\nIn case everything works fine you can change the line in your package.json\r\n\r\nfrom:\r\n\r\n- `\"debug\": \"nodemon $2 --exec babel-node --debug\",`\r\n\r\nto:\r\n\r\n- `\"debug\": \"babel-node-debug $2\",`\r\n\r\nand run it via `npm run debug src` for a damn sweet debugging experience.\r\n\r\n\r\n### Security & Updates\r\n\r\n_Run vulnerability tests via node security platform and check dependencies for updates_\r\n\r\n- `npm install --save-dev nsp` - install node security platform command-line tool [nsp](https://github.com/nodesecurity/nsp)\r\n- `npm install --save-dev npm-check-updates` - install [ncu](https://github.com/tjunnone/npm-check-updates) to check for the latest versions of the dependencies\r\n\r\n\r\n### gimme some more\r\n\r\nFor more packages have a look at the <https://github.com/babel/babel/tree/master/packages> or read more about this topic on <https://babeljs.io/docs/plugins/#presets>\r\n\r\n\r\n### package.json\r\n\r\nTo avoid messing around with separate config files like .babelrc, .eslintrc.json and others we can put all that stuff directly in our package.json file:\r\n\r\n```\r\n{\r\n  \"name\": \"your-awesome-module\",\r\n  \"version\": \"0.0.1\",\r\n  \"babel\": {\r\n    \"presets\": [\r\n      \"es2015-node6\",\r\n      \"stage-0\",\r\n      \"babili\"\r\n    ]\r\n  },\r\n  \"eslintConfig\": {\r\n    \"extends\": \"standard\",\r\n    \"plugins\": [\r\n      \"standard\",\r\n      \"promise\"\r\n    ]\r\n  } \r\n  ...\r\n```\r\n\r\nI added to `npm start` and `npm run debug` a argument ($2) to pass the location of the file. This allows you to quickly switch between different files without changing package.json.\r\n\r\nExamples:\r\n\r\nIn case you want to run `./src/index.js` you can pass `npm start src` without the need of index.js. To run `./src/app1.js` run `npm start src/app1` and so on ...\r\n\r\n\r\n### Commitizen\r\n\r\n`npm install commitizen -g` - Installation\r\n\r\n`commitizen init cz-conventional-changelog --save-dev --save-exact` - Setup\r\n\r\nBadge:  \r\n\r\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) \r\n\r\n`[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)`\r\n\r\n\r\n## Releasing with Standard-Version\r\n\r\n`npm i --save-dev standard-version` - Installation as Dev Dependency\r\n\r\n`npm i -g standard-version` - or as global Installation\r\n\r\n`commitizen init standard-changelog --save-dev --save-exact` - Setup\r\n\r\n`\"release\": \"standard-version\"` - add run script to `package.json`\r\n\r\n`\"release\": \"standard-version --sign\"` - if you use GPG for signing add `--sign`\r\n\r\n`npm run release --first-release` - first release\r\n\r\n`npm run release` - further releases\r\n\r\nBadge:  \r\n\r\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\r\n\r\n`[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)`\r\n\r\n\r\n### Contact / Social Media\r\n\r\n_Get the latest News about Web Development, Open Source, Tooling, Server & Security_\r\n\r\n[![Twitter](https://github.frapsoft.com/social/twitter.png)](https://twitter.com/frapsoft/)[![Facebook](https://github.frapsoft.com/social/facebook.png)](https://www.facebook.com/frapsoft/)[![Google+](https://github.frapsoft.com/social/google-plus.png)](https://plus.google.com/116540931335841862774)[![Gitter](https://github.frapsoft.com/social/gitter.png)](https://gitter.im/frapsoft/frapsoft/)[![Github](https://github.frapsoft.com/social/github.png)](https://github.com/ellerbrock/)\r\n\r\n\r\n### License\r\n\r\nCopyright (c) 2016 [Maik Ellerbrock](https://github.com/ellerbrock/)\r\n\r\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit-125x28.png?v=102)](https://opensource.org/licenses/mit-license.php)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}